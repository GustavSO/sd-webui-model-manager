import gradio as gr

from scripts.mm_libs import hasher, loader
from scripts.mm_libs.debug import d_debug, d_info, d_message, d_warn
from scripts.mm_libs.storage import Storage

from modules.ui_components import ToolButton

PURGE_SYMBOL = '\U0001f4a3\ufe0f' #ðŸ’£
SKULL_SYMBOL = '\U0001f480\ufe0f' #ðŸ’€
EXPLOSION_SYMBOL = '\U0001f4a5\ufe0f' #ðŸ’¥

def UI():
    with gr.Tab("Hashing"):
        with gr.Accordion("README", open=False):
            gr.Markdown(
                """
                # Hasher
                Tool to generate hashes for the selected models and fetch data from Civitai.
                ## Usage
                The "Update Cache" button will:
                &emsp; 1. Check all the files of the selected model types against the cache file.
                &emsp; 2. Add and update the cache file with any new files found.
                The "Generate Hashes" button will:
                &emsp; 1. Filter out all the files that already have a hash in the cache file.
                &emsp; 2. Generate hashes for all the remaining files using the selected hashing algorithm and update the cache file.
                The "Check cache against Civitai" will do two things:
                &emsp; 1. Filter out all the models that already have the "model url" field filled out in its JSON file.
                &emsp; 2. Then it will check all the remaining models against the Civitai API using their generated hashes.
                &emsp; 3. If a model is found, it will update the "model url" field in the model's JSON file with the download url from Civitai.
                The "Purge Cache" button will delete the local cache file.
                ## Notes
                The recommended hashing algorithm is CRC32 as it is the fastest and should be fine as the Civitai API accepts CRC32 hashes.
                Still, be aware that the hashing process can take a long time depending on the number of files and their sizes (Especially if hashing using SHA256)
                The same goes for checking the cache against Civitai, as it will make a request for each file that is not already checked.
                The only information currently fetched from Civitai is the download URL for the model -> allowing for opening the model using the globe button on the model card in the main interface.
                """
            )
        with gr.Row():
            with gr.Column():
                types_cbgroup = gr.CheckboxGroup(loader.folders.keys(), label="Model Types", elem_classes="mm_cbgroup")
                hash_algorithm_radio = gr.Radio(["CRC32", "SHA256", "Blake3"], value="CRC32", label="Hash Algorithm", elem_classes="mm_radio")
            with gr.Column():
                update_cache_btn = gr.Button("Update Cache", elem_classes="mm_btn")
                hash_files_btn = gr.Button("Generate Hashes", elem_classes="mm_btn")

        check_civitai_btn = gr.Button("Check cache against Civitai", elem_classes="mm_btn")
        
        with gr.Accordion("Cache Overview", open=False):
            with gr.Row():
                gr.Markdown("Overview of the cached files. Give some info about how many files of each type are cached.")
                with gr.Column():
                    purge_cache_btn = gr.Button("Purge Cache", elem_classes="mm_btn")
                    # get_storage_size_btn = gr.Button("Get Storage Size", elem_classes="mm_btn")
            cache_overview = gr.JSON(Storage().to_dict(ui_friendly=True), label="Cache Overview", elem_classes="mm_json")
                

    with gr.Tab("Cache Explorer"):
        with gr.Row():
            gr.Markdown(
                """
                # Cache Explorer V0.1Alpha
                This tool will allow you to explore the cache file that is generated by the hasher.
                ## Usage
                Click the "Display Cache" button to display the cached files.
                &emsp; - If there are a lot of files the UI might become unresponsive while loading and slow to respond while the cache is displayed.
                When you are done, click the "Hide Cache" button to hide the cached files.
                &emsp; - This will not delete any files, just hide them from view, making the UI more responsive again.
                ## Notes
                In it's current state, the cache explorer is very basic and only displays the cached files in a JSON format
                Sorting and filtering will be added in the future.
                """
            )
            with gr.Column():
                display_cache_btn = gr.Button("Display Cache", elem_classes="mm_btn")
                hide_cache_btn = gr.Button("Hide Cache", elem_classes="mm_btn")
        cached_json = gr.JSON(label="Cached Files", elem_classes="mm_json")
    with gr.Tab("Hasher Settings"):
        gr.Markdown(
            """
            # Hasher Settings
            Temporary placeholder for hasher settings - will be moved to the real settings page later
            These settings are not yet implemented and are only here for show (and for development)
            """
        )
        multi_process_cb = gr.Checkbox(label="Use Multi-Processing", elem_classes="mm_cbgroup", info="Use multiple processes to hash the files [DISABLED]", interactive=False)

    update_cache_btn.click(update_cache, inputs=[types_cbgroup], outputs=cache_overview)
    hash_files_btn.click(hash_files, inputs=[types_cbgroup, hash_algorithm_radio, multi_process_cb], outputs=cache_overview)

    check_civitai_btn.click(check_civitai, None, None)

    display_cache_btn.click(display_cache, None, cached_json)
    hide_cache_btn.click(lambda: None, None, cached_json)
    
    purge_cache_btn.click(purge_cache, inputs=purge_cache_btn, outputs=[purge_cache_btn, cache_overview])
    # get_storage_size_btn.click(get_storage_size, None, None)

def check_civitai():
    hasher.check_civitai()

def purge_cache(button_value):
    if button_value == "Purge Cache":
        d_warn("Click the button again to confirm purging the cache. This action cannot be undone")
        return ["Confirm Purge", Storage().to_dict(ui_friendly=True)]
    if button_value == "Confirm Purge":
        hasher.purge_cache()
        d_info("Cache file purged")
        return ["Purge Cache", Storage().to_dict(ui_friendly=True)]

    # if button_value == PURGE_SYMBOL:
    #     d_warn("Click the button again to confirm purging the cache. This action cannot be undone")
    #     return [SKULL_SYMBOL, Storage().to_dict(ui_friendly=True)]
    # if button_value == SKULL_SYMBOL:
    #     hasher2.purge_cache()
    #     d_info("Cache file purged")
    #     return [PURGE_SYMBOL, Storage().to_dict(ui_friendly=True)]
        
def get_storage_size():
    d_debug("Getting the size of the storage object in memory (not the cache file)")
    hasher.get_storage_size()

def display_cache():
    d_debug("Displaying cache")
    return Storage().to_dict(ui_friendly=False)

def update_cache(types):
    if not types:
        d_warn("No types selected for updating cache")
        return gr.update()

    return hasher.update_cache_file(types)
    

def hash_files(model_types, algorithm, multi_process):
    if not model_types:
        d_warn("No types selected for hashing")
        return gr.update()

    d_debug(f"Hashing files using {algorithm} algorithm")
    d_debug(f"Multi-process: {multi_process}")
    algorithm = algorithm.lower()
    return hasher.perform_hashing(model_types, algorithm, multi_process)
    